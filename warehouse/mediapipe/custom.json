[
  {
    "type": "bash",
    "disabled": false,
    "code": "if [ ! -f efficientdet.tflite ]; then\n    wget -nc -O efficientdet.tflite \"https://storage.googleapis.com/mediapipe-models/object_detector/efficientdet_lite0/int8/1/efficientdet_lite0.tflite\"\nelse\n    echo \"Model already exist.\"\nfi"
  },
  {
    "type": "bash",
    "disabled": false,
    "code": "if [ -f ../cat_and_dog.png ]; then\n    cp -f ../cat_and_dog.png cat_and_dog.png\nfi"
  },
  {
    "type": "python",
    "disabled": false,
    "code": "import cv2\nimport json\nimport mediapipe as mp\nimport numpy as np\nfrom mediapipe.tasks import python\nfrom mediapipe.tasks.python import vision\n\nIMAGE_FILE = 'cat_and_dog.png'\nimg = cv2.imread(IMAGE_FILE)\nheight, width = img.shape[:2]\nnew_width = 800\nnew_height = int(height * (new_width / width))\nimg_resized = cv2.resize(img, (new_width, new_height))\nimg_rgb = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)\n\nbase_options = python.BaseOptions(model_asset_path='efficientdet.tflite')\noptions = vision.ObjectDetectorOptions(base_options=base_options, score_threshold=0.5)\ndetector = vision.ObjectDetector.create_from_options(options)\n\nimage = mp.Image(image_format=mp.ImageFormat.SRGB, data=img_rgb)\ndetection_result = detector.detect(image)\n\nimage_copy = np.copy(image.numpy_view())\nobject_data = []\n\nfor i, detection in enumerate(detection_result.detections):\n    bbox = detection.bounding_box\n    x_min, y_min = int(bbox.origin_x), int(bbox.origin_y)\n    x_max, y_max = int(bbox.origin_x + bbox.width), int(bbox.origin_y + bbox.height)\n    coordinates = {\n        \"id\": i,\n        \"category\": detection.categories[0].category_name,\n        \"score\": detection.categories[0].score,\n        \"bounding_box\": {\"x_min\": x_min, \"y_min\": y_min, \"x_max\": x_max, \"y_max\": y_max},\n        \"centroid\": {\"x\": (x_min + x_max) // 2, \"y\": (y_min + y_max) // 2}\n    }\n    object_data.append(coordinates)\n    \n    cv2.rectangle(image_copy, (x_min, y_min), (x_max, y_max), color=(255, 0, 0), thickness=2)\n    label = f'{detection.categories[0].category_name}: {detection.categories[0].score:.2f}'\n    (label_width, label_height), * = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)\n    label_x = x_min + (x_max - x_min) // 2 - label_width // 2\n    label_y = y_min + (y_max - y_min) // 2 + label_height // 2\n    cv2.rectangle(image_copy, (label_x - 2, label_y - label_height - 2), (label_x + label_width + 2, label_y + 2), color=(255, 0, 0), thickness=-1)\n    cv2.putText(image_copy, label, (label_x, label_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1, cv2.LINE_AA)\n\nimage_copy_bgr = cv2.cvtColor(image_copy, cv2.COLOR_RGB2BGR)\ncv2.imwrite('output_image_with_boxes.jpg', image_copy_bgr)\n\nwith open('detected_objects.json', 'w') as f:\n    json.dump(object_data, f, indent=4)\n\nprint(\"Object data saved as detected_objects.json\")"
  }
]