[
  {
    "type": "bash",
    "disabled": false,
    "code": "if [ ! -f EuroLLM-1.7B-Instruct/EuroLLM-1.7B-Instruct-Q4_K_M.gguf ]; then\n    flatpack compress utter-project/EuroLLM-1.7B-Instruct --method llama.cpp --token $HUGGING_FACE_TOKEN\nelse\n    echo \"Model already exists.\"\nfi"
  },
  {
    "type": "bash",
    "disabled": false,
    "code": "if [ -d \"vector\" ]; then\n    echo \"Directory 'vector' already exists. Deleting it now.\"\n    rm -rf \"vector\"\n    echo \"Directory 'vector' has been deleted.\"\nfi\n\necho \"Creating 'vector' directory now.\"\n\nmkdir \"vector\"\n\necho \"Directory 'vector' created successfully.\""
  },
  {
    "type": "bash",
    "disabled": false,
    "code": "BLUE='\\033[1;34m'\nBOLD='\\033[1m'\nCYAN='\\033[1;36m'\nGREEN='\\033[1;32m'\nNC='\\033[0m'\nYELLOW='\\033[1;33m'\n\necho -en \"${BOLD}ðŸ’¬ You >${NC} \"\n\nwhile true; do\n    if ! read -r INPUT; then\n        echo \"^D detected, exiting...\"\n        break\n    fi\n    \n    [ -z \"$INPUT\" ] && continue\n    [ \"$INPUT\" = \"exit\" ] && {\n        echo \"ðŸ‘‹ Goodbye!\"\n        break\n    }\n    \n    echo -en \"\\033[s\"\n    echo -e \"${CYAN}Checking memory...${NC}\"\n    \n    MEMORY=$(flatpack vector search-text \"$INPUT\" --data-dir \"vector\" --json --recency-weight 1.0 | jq -r \".[] | .text\" | tail -r || echo \"\")\n\n    echo -en \"\\033[1A\\033[K\"\n\n    if [ -n \"$MEMORY\" ]; then\n        echo -e \"${BLUE}<memory>${NC}\"\n        echo -e \"${GREEN}$MEMORY${NC}\"\n        echo -e \"${BLUE}</memory>${NC}\"\n    fi\n\n    echo -en \"\\033[s\"\n    echo -e \"${CYAN}Generating response...${NC}\"\n\n    PROMPT=\"<|im_start|>system\\nLet us have genuine and helpful conversations. Share your knowledge clearly and stay on topic, but speak naturally - like chatting with a friend who wants to understand what you are explaining. Remember that brief, clear answers often work best for simple questions, while complex topics deserve more thorough discussion.\\n\"\n    PROMPT+=\"Here is some context to guide your response:\\n\"\n    [ ! -z \"$MEMORY\" ] && PROMPT+=\"$MEMORY\\n\"\n    PROMPT+=\"<|im_end|>\\n<|im_start|>user\\n${INPUT}<|im_end|>\\n<|im_start|>assistant\"\n\n    ./build/bin/llama-cli \\\n        -m \"EuroLLM-1.7B-Instruct/EuroLLM-1.7B-Instruct-Q4_K_M.gguf\" \\\n        -n \"$TOKENS\" \\\n        --temp 0.1 \\\n        --no-display-prompt \\\n        -p \"$PROMPT\" \\\n        > output.txt \\\n        2>log.txt\n\n    RESPONSE=$(cat output.txt | \\\n        awk NF | \\\n        sed -E 's/<[^>]*>//g' | \\\n        tr '\\n' ' ' | \\\n        sed 's/^[[:space:]>]*//g' | \\\n        sed 's/[[:space:]]*$//g' | \\\n        sed 's/^:\\s*//g' | \\\n        sed 's/\\s*:$//g' | \\\n        sed 's/\\[end of text\\]//g' | \\\n        tr -s ' ' | \\\n        sed 's/> *//' | \\\n        sed 's/^ *//g' | \\\n        sed 's/ *$//g')\n\n    if [ -n \"$RESPONSE\" ]; then\n        flatpack vector add-texts \"User: ${INPUT}\\nAssistant: ${RESPONSE}\" --data-dir \"vector\" >/dev/null 2>&1\n        # Move up one line and clear, then show response\n        echo -en \"\\033[1A\\033[K${YELLOW}<assistant>$RESPONSE</assistant>${NC}\"\n    fi\n    echo -en \"\\n${BOLD}ðŸ’¬ You >${NC} \"\ndone"
  }
]