use dockerfile_parser::Dockerfile;
use reqwest;
use serde::Deserialize;
use std::collections::BTreeMap;
use std::error::Error;

#[derive(Deserialize)]
pub struct Config {
    base_image: String,
    dataset: Vec<BTreeMap<String, String>>,
    directories: BTreeMap<String, String>,
    environment: BTreeMap<String, String>,
    file: Vec<BTreeMap<String, String>>,
    git: Vec<BTreeMap<String, String>>,
    packages: BTreeMap<String, BTreeMap<String, String>>,
    port: Vec<BTreeMap<String, u16>>,
    run: Vec<BTreeMap<String, String>>,
    cmd: Vec<BTreeMap<String, String>>,
    #[allow(dead_code)]
    version: String,
}

pub async fn parse_toml_to_dockerfile(url: &str) -> Result<String, Box<dyn Error>> {
    let response = reqwest::get(url).await?;

    if !response.status().is_success() {
        return Err(format!("Failed to get file from URL: server responded with status code {}", response.status()).into());
    }

    let res = response.text().await?;
    let config: Config = toml::from_str(&res)?;

    // Start building the Dockerfile string
    let mut dockerfile = String::new();

    // Add comment indicating it was generated with flatpack.ai and the timestamp
    let timestamp = chrono::Utc::now().format("%Y-%m-%d %H:%M:%S").to_string();
    dockerfile.push_str(&format!("# This file was automatically @generated by flatpack.ai on {}.\n", timestamp));
    dockerfile.push_str("# It is not intended for manual editing.\n\n");

    // Base image
    dockerfile.push_str(&format!("FROM {}\n", config.base_image));

    // Create directories
    dockerfile.push_str("\n# Create directories\n");
    let directories: Vec<&str> = config.directories.values().map(|v| v.as_str()).collect();
    dockerfile.push_str(&format!("RUN mkdir -p {}\n", directories.join(" ")));

    // Environment variables
    for (key, value) in config.environment.iter() {
        dockerfile.push_str(&format!("ENV {}={}\n", key, value));
    }

    // Install packages
    dockerfile.push_str("\n# Install packages\n");

    // Update package list
    dockerfile.push_str("RUN apt-get update && apt-get upgrade -y");

    if let Some(unix_packages) = config.packages.get("unix") {
        let package_list: Vec<String> = unix_packages
            .iter()
            .map(|(package, version)| {
                if version == "*" || version.is_empty() {
                    format!("{}", package)  // If version is not specified or "*", get the latest version
                } else {
                    format!("{}={}", package, version)  // If version is specified, get that version
                }
            })
            .collect();
        dockerfile.push_str(&format!(" && apt-get install -y {}", package_list.join(" ")));
    }

    // Remove unnecessary packages and clear apt cache
    dockerfile.push_str(" && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*");

    if let Some(python_packages) = config.packages.get("python") {
        let package_list: Vec<String> = python_packages
            .iter()
            .map(|(package, version)| {
                if version == "*" || version.is_empty() {
                    format!("{}", package)  // If version is not specified or "*", get the latest version
                } else {
                    format!("{}=={}", package, version)  // If version is specified, get that version
                }
            })
            .collect();
        dockerfile.push_str(&format!(
            " && pip install {}",
            package_list.join(" ")
        ));
    }

    // Add a newline before EXPOSE ports
    dockerfile.push_str("\n");

    // Ports
    dockerfile.push_str("\n# Expose ports\n");
    for port in config.port.iter() {
        if let Some(internal) = port.get("internal") {
            dockerfile.push_str(&format!("EXPOSE {}\n", internal));
        }
        // Note: Dockerfiles can't directly handle external ports. They need to be handled at runtime.
        if let Some(external) = port.get("external") {
            eprintln!("Info: External port {} specified. This needs to be mapped at runtime, e.g. with 'docker run -p {}:...'.", external, external);
        }
    }

    // Download datasets and files
    dockerfile.push_str("\n# Download datasets and files\n");

    for dataset in config.dataset.iter() {
        if let (Some(from_source), Some(to_destination)) = (dataset.get("from_source"), dataset.get("to_destination")) {
            dockerfile.push_str(&format!("RUN wget {} -O {}\n", from_source, to_destination));
        } else {
            eprintln!("Warning: Invalid dataset entry. It should include both 'from_source' and 'to_destination'.");
        }
    }

    for file in config.file.iter() {
        if let (Some(from_source), Some(to_destination)) = (file.get("from_source"), file.get("to_destination")) {
            dockerfile.push_str(&format!("RUN wget {} -O {}\n", from_source, to_destination));
        } else {
            eprintln!("Warning: Invalid file entry. It should include both 'from_source' and 'to_destination'.");
        }
    }

    // Git repositories
    dockerfile.push_str("\n# Clone git repositories\n");
    for git in config.git.iter() {
        if let (Some(from_source), Some(to_destination)) = (git.get("from_source"), git.get("to_destination")) {
            dockerfile.push_str(&format!("RUN git clone {} {}\n", from_source, to_destination));
        } else {
            eprintln!("Warning: Invalid git entry. It should include both 'from_source' and 'to_destination'.");
        }
    }

    // RUN commands
    dockerfile.push_str("\n# RUN commands\n");
    for run in config.run.iter() {
        if let (Some(command), Some(args)) = (run.get("command"), run.get("args")) {
            dockerfile.push_str(&format!("RUN {} {}\n", command, args));
        } else {
            eprintln!("Warning: Invalid run entry. It should include both 'command' and 'args'.");
        }
    }

    // CMD command
    dockerfile.push_str("\n# CMD command\n");
    if config.cmd.len() != 1 {
        return Err("Invalid number of CMD entries. There should be exactly one CMD entry.".into());
    }
    for cmd in config.cmd.iter() {
        if let (Some(command), Some(args)) = (cmd.get("command"), cmd.get("args")) {
            // We need to handle command and args separately
            dockerfile.push_str("CMD [");
            dockerfile.push_str("\"");
            dockerfile.push_str(command);
            dockerfile.push_str("\", ");
            // Splitting the args into separate strings
            let cmd_args: Vec<&str> = args.split(' ').collect();
            for (i, arg) in cmd_args.iter().enumerate() {
                dockerfile.push_str("\"");
                dockerfile.push_str(arg);
                dockerfile.push_str("\"");
                if i != cmd_args.len() - 1 {
                    dockerfile.push_str(", ");
                }
            }
            dockerfile.push_str("]\n");
        } else {
            return Err("Invalid CMD entry. It should include both 'command' and 'args'.".into());
        }
    }

    // Validate Containerfile syntax
    match Dockerfile::parse(&dockerfile) {
        Ok(_) => {
            // Add feedback message when the build is complete
            dockerfile.push_str("\n# Build complete! ðŸŽ‰\n");
            Ok(dockerfile)
        }
        Err(e) => Err(format!("Error parsing Containerfile: {}", e).into())
    }
}

pub async fn parse_toml_to_pyenv_script(url: &str) -> Result<String, Box<dyn Error>> {
    let response = reqwest::get(url).await?;
    if !response.status().is_success() {
        return Err(format!("Failed to get file from URL: server responded with status code {}", response.status()).into());
    }
    let res = response.text().await?;
    let config: Config = toml::from_str(&res)?;
    let model_name = config.environment.get("model_name").ok_or("Missing model_name in flatpack.toml")?;
    let mut script = String::new();

    script.push_str("#!/bin/bash\n");

    // Create a new project directory
    script.push_str(&format!("mkdir -p ./{}\n", model_name));

    // Create directories
    script.push_str("# Create directories\n");
    for (_directory_name, directory_path) in &config.directories {
        let formatted_directory_path = directory_path.trim_start_matches('/');
        let without_home_content = formatted_directory_path.trim_start_matches("home/content/");
        script.push_str(&format!("mkdir -p ./{}/{}\n", model_name, without_home_content));
    }

    // Set environment variables
    for (key, value) in &config.environment {
        script.push_str(&format!("export {}={}\n", key, value.replace("/home/content/", &format!("./{}/", model_name))));
    }

    // Navigate to the project directory
    script.push_str(&format!("cd ./{}/\n", model_name));

    // Create a new pyenv environment and activate it
    script.push_str("pyenv virtualenv 3.11.3 myenv\n");
    script.push_str("pyenv activate myenv\n");

    // Install Python packages
    if let Some(python_packages) = config.packages.get("python") {
        let package_list: Vec<String> = python_packages
            .iter()
            .map(|(package, version)| {
                if version == "*" || version.is_empty() {
                    format!("{}", package)  // If version is not specified or "*", get the latest version
                } else {
                    format!("{}=={}", package, version)  // If version is specified, get that version
                }
            })
            .collect();
        script.push_str(&format!(
            "pip install {}\n",
            package_list.join(" ")
        ));
    }

    // Download datasets and files
    for dataset in &config.dataset {
        if let (Some(from_source), Some(to_destination)) = (dataset.get("from_source"), dataset.get("to_destination")) {
            script.push_str(&format!("wget {} -P ./{}/{}\n", from_source, model_name, to_destination.replace("/home/content/", "")));
        }
    }

    // Git repositories
    for git in &config.git {
        if let (Some(from_source), Some(to_destination)) = (git.get("from_source"), git.get("to_destination")) {
            script.push_str(&format!("git clone {} ./{}/{}\n", from_source, model_name, to_destination.replace("/home/content/", "")));
        }
    }

    // RUN commands
    for run in &config.run {
        if let (Some(command), Some(args)) = (run.get("command"), run.get("args")) {
            script.push_str(&format!("{} {}\n", command, args.replace("/home/content/", "")));
        }
    }

    // Add pyenv command to the script
    script.push_str("\n# Set up pyenv\n");
    script.push_str("pyenv init -\n");

    Ok(script)
}